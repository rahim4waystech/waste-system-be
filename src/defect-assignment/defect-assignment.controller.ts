
import { DefectAssignment } from "./defect-assignment.entity";
import { Crud, CrudController } from "@nestjsx/crud";
import { Controller } from "@nestjs/common";
import { DefectAssignmentService } from "./defect-assignment.service";
import { Get } from "@nestjs/common";
import { DefectJobService } from "src/defect-job/defect-job.service";
import { DefectJob } from "src/defect-job/defect-job.entity";
import { format } from "prettier";
import moment = require("moment");
/**
 * This file was generated by Four Ways Technology
 *
 * On Tue Dec 15 2020 10:09:19 GMT+0000 (Greenwich Mean Time)
 */
@Crud({
    model: {
      type: DefectAssignment
    },
    query: {
      join: {
        fitter: {
          eager: true,
        },
        subcontractor: {
          eager: true
        },
        depot: {
          eager: true,
        },
        subcontractorDepot: {
          eager: true
        }
      }
    }
  })
  @Controller('defect-assignment')
  export class DefectAssignmentController implements CrudController<DefectAssignment> {
    constructor(public service: DefectAssignmentService,
      private defectJobService: DefectJobService) {}

    // Only call this from a cronjob
    @Get('nextday')
    async moveToNextDay() {
      const date: string = '2021-05-13';
      // Get all allocations for yesterday
      const assignments: any[] = await this.service.getAllAssignmentsByDate(date);

      // Get the jobs
      for(let i = 0; i < assignments.length; i++) {
        const assignment = assignments[i];
        assignment.jobs = await this.defectJobService.getAllJobsByAssignmentId(assignment.id);
      }


      const newJobsToAdd = [];
      const jobsToUpdate = [];

      for(let i = 0; i < assignments.length; i++) {
        const assignment = assignments[i];
        
        for(let i2 = 0; i2 < assignment.jobs.length; i2++) {

          const job = assignment.jobs[i2];
          if(job.deleted === false && (job.ended === null || job.ended === undefined  || job.ended === '') && (job.started !== null && job.started !== '' && job.started !== undefined)) {
            // move job to next day
            newJobsToAdd.push(JSON.parse(JSON.stringify(job)));

            // set ended to yesterday
            job.ended = date + ' 23:59:00'; // Hmmm need a better time for this
            job.defectStatusId = 5;
            job.defectStatus = {id: 5} as any;

            await this.defectJobService.saveDTO(job);
          }
        }
      }

      const assignmentsAdded = [];
      // Copy jobs/assignments to next day
      for(let i = 0; i < newJobsToAdd.length; i++) {
        const job: DefectJob = newJobsToAdd[i];
        const assignment = assignments.filter(a => a.id === job.defectAssignmentId)[0];

        let newAssignmentId = -1;
        if(assignment && assignmentsAdded.indexOf(assignment.id) === -1) {
          let newAssignment: DefectAssignment = JSON.parse(JSON.stringify(assignment));

          delete newAssignment['id'];
          newAssignment.date = moment(date).add(1, 'days').format('YYYY-MM-DD');

          newAssignment = await this.service.saveDTO(newAssignment);

          newAssignmentId = newAssignment.id;

          assignmentsAdded.push(assignment.id);
        }

        const newJob: DefectJob = JSON.parse(JSON.stringify(job));

        delete newJob['id'];
        newJob.date = moment(date).add(1, 'days').format('YYYY-MM-DD');
        newJob.defectAssignmentId = newAssignmentId;
        newJob.defectAssignment = {id: newAssignmentId} as any;

        await this.defectJobService.saveDTO(newJob);
      }


      // Set outstanding jobs to ended yesterday
      for(let i = 0; i < jobsToUpdate.length; i++) {
        const job = jobsToUpdate[i];

        await this.defectJobService.saveDTO(jobsToUpdate);
      }
    }
  }
