
import { Job } from "./job.entity";
import { Injectable } from "@nestjs/common";
import { InjectRepository } from "@nestjs/typeorm";

import { TypeOrmCrudService } from "@nestjsx/crud-typeorm";
import { Not } from "typeorm/find-options/operator/Not";
import { In } from "typeorm";

/**
 * This file was generated by Four Ways Technology
 * 
 * On Tue Aug 25 2020 13:55:19 GMT+0100 (British Summer Time)
 */
@Injectable()
export class JobService extends TypeOrmCrudService<Job> {
  constructor(@InjectRepository(Job) repo) {
    super(repo);
  }

  async getExtraDetailsForNote(accountId, tipSiteId, sicId) {
    const data = await this.repo.manager.query('select * from tip_details where tipId = ?', [tipSiteId]);
    
   const customerDetails = await this.repo.manager.query('select * from customer_details where accountId = ?', [accountId]);

   const sicCode = await this.repo.manager.query('select * from sic where id = ?', [sicId]);

    return {tipDetails: data[0], customerDetails: customerDetails[0], sicCode: sicCode[0]};

  }

  async updateJob(job: Job) {
    return await this.repo.save(job);
  }

  async getAllJobsByAssignmentIds(ids:number[]=[]) {

    if(ids.length === 0) {
      return [];
    }
    return await this.find({
      where: {
        jobAssignmentId: In(ids),
      }
    })
  } 


  async findByTicketNo(ticketNo:string='') {
    // match all numbers

    // const ticket5DigitsStart = ticketNo.substring(0, ticketNo.length - 1);
    // const ticket5DigitsEnd = ticketNo.substring(ticketNo.length - 1, ticketNo.length);

    // match 4 + 2
    const ticket4DigitsStart = ticketNo.substring(0, ticketNo.length - 2);
    const ticket4DigitsEnd = ticketNo.substring(ticketNo.length - 2, ticketNo.length);

    // match 3 + 3
    const ticket3DigitsStart = ticketNo.substring(0, ticketNo.length - 3);
    const ticket3DigitsEnd = ticketNo.substring(ticketNo.length - 3, ticketNo.length);

    // match 2 + 4
    const ticket2DigitsStart = ticketNo.substring(0, ticketNo.length - 4);
    const ticket2DigitsEnd = ticketNo.substring(ticketNo.length - 4, ticketNo.length);

    return await this.repo.query(`
      SELECT id FROM job 
      where job.transportSignOffNotes LIKE ?
      OR (job.transportSignOffNotes LIKE ? and job.transportSignOffNotes LIKE ?)
      OR (job.transportSignOffNotes LIKE ? and job.transportSignOffNotes LIKE ?)
      OR (job.transportSignOffNotes LIKE ? and job.transportSignOffNotes LIKE ?)
    `, [
      '%' + ticketNo + '%', 
      // '%' + ticket5DigitsStart + '%', 
      // '%' + ticket5DigitsEnd + '%',
      '%' + ticket4DigitsStart + '%', 
      '%' + ticket4DigitsEnd + '%',
      '%' + ticket3DigitsStart + '%', 
      '%' + ticket3DigitsEnd + '%',
      '%' + ticket2DigitsStart + '%', 
      '%' + ticket2DigitsEnd + '%'
    ]);
  }

  async getJobsForSepaReport(tipSiteId: number=-1, startDate:string='', endDate:string='') {
    return await this.repo.query(`
    select invoiceId as 'invoiceId', jobId as 'jobId', concat(driver.firstName, ' ', driver.lastName) as 'driver',  vehicle.registration as 'vehicle', subcontractor.name as 'subcontractor', job.subcontractorReg from invoice_item 
left join job on job.id = invoice_item.jobId
left join job_assignment on job_assignment.id = job.JobAssignmentId
left join driver on driver.id = job_assignment.driverId
left join vehicle on vehicle.id = job_assignment.vehicleId
left join subcontractor on subcontractor.id = job_assignment.subcontractorId
left join \`order\` on job.orderId = order.id
where \`order\`.tipSiteId = ?
AND job.date between ? and ?
    `, [tipSiteId, startDate, endDate]);
  }


  async getJobsByOrderId(orderId: number=-1) {
    if(!orderId || orderId === -1) {
      throw new Error('You must provide an orderId for getJobsByOrderId');
    }

    return await this.repo.createQueryBuilder('job')
  }

  async getJobById(id: number) {
    if(!id || id === -1) {
      throw new Error('you must provide an id for getJobById');
    }

    return await this.repo.createQueryBuilder('job')
    .leftJoinAndSelect('job.order', 'order')
    .leftJoinAndSelect('job.driverJobStatus', 'driverJobStatus')
    .leftJoinAndSelect('order.account', 'account')
    .leftJoinAndSelect('order.site', 'site')
    .leftJoinAndSelect('order.skipOrderType', 'skipOrderType')
    .leftJoinAndSelect('order.containerSizeType', 'containerSizeType')
    .leftJoinAndSelect('order.containerType', 'containerType')
    .leftJoinAndSelect('order.grade', 'grade')
    .leftJoinAndSelect('order.shredderOrderType', 'shredderOrderType')
    .getOne();
  }

  async getAllJobsByOrderId(orderId: number=-1) {
    if(!orderId || orderId === -1) {
      throw new Error('You must provide a valid order id in getAllJobIdsFromOrder');
    }
    return await this.repo.createQueryBuilder('job')
    .leftJoinAndSelect('job.order', 'order')
    .where('job.orderId = :orderId', {orderId: orderId})
    .getMany();
  }

  async getJobsByDateForTransport(date:string, orderTypeId: number=-1) {
    return await this.repo.createQueryBuilder('job')
    .leftJoinAndSelect('job.order', 'order')
    .leftJoinAndSelect('job.driverJobStatus', 'driverJobStatus')
    .leftJoinAndSelect('order.account', 'account')
    .leftJoinAndSelect('order.site', 'site')
    .leftJoinAndSelect('order.skipOrderType', 'skipOrderType')
    .leftJoinAndSelect('order.containerSizeType', 'containerSizeType')
    .leftJoinAndSelect('order.containerType', 'containerType')
    .leftJoinAndSelect('order.grade', 'grade')
    .leftJoinAndSelect('order.shredderOrderType', 'shredderOrderType')
    .leftJoinAndSelect('order.orderLines', 'orderLines')
    .leftJoinAndSelect('orderLines.quoteLine', 'quoteLine')
    .leftJoinAndSelect('orderLines.unit', 'orderLines.unit')
    .leftJoinAndSelect('quoteLine.product', 'product')
    .leftJoinAndSelect('product.unit', 'product.unit')
    .leftJoinAndSelect('order.tipSite', 'tipSite')
    .leftJoinAndSelect('job.createdUser', 'createdUser')
    .leftJoinAndSelect('job.updatedUser', 'updatedUser')
    .where('job.jobStatusId != 3')
    .where('order.orderTypeId = :orderType', {orderType: orderTypeId})
    .where('job.date = :date', {date: date})
    .getMany();
  }

  async getAllUnits() {
    return await this.repo.query(`select * from unit`);
  }
  /**New Work**/
  async InsertJobAssignment(data: any){

    let params = [];
    params.push(data[0].vehicleId);
    params.push(data[0].driverId);
    params.push(data[0].subcontractorId);
    params.push(data[0].depotId);
    params.push(data[0].skipRoundId);
    params.push(data[0].date);
    params.push(data[0].slotNumber);
    params.push(data[0].driverStartTime);
    params.push(data[0].createdBy);
    params.push(data[0].trailerId);
    params.push(data[0].name);
    params.push(data[0].orderTypeId);
    params.push(data[0].recurrenceId);
    params.push(data[0].notes);
    params.push(data[0].trailerStatusId);

    var query = `
    INSERT INTO job_assignment(vehicleId,driverId,subcontractorId,depotId,skipRoundId,date,slotNumber,driverStartTime,createdBy,createdAt,updatedAt,trailerId,name,orderTypeId,recurrenceId,notes,trailerStatusId)
    VALUES(?,	?,	?,	?,	?,	?,	?,	?,	?, CURRENT_TIMESTAMP(),	CURRENT_TIMESTAMP(),	?,	?,	?,	?,	?,	?)
    `
    return await this.repo.query(query,params)

  }
  async CreateCustomJob(data: Job){
    const result = await this.repo.query(`
      INSERT INTO job(id,jobAssignmentId,jobStatusId,orderId,blockNumber,qty,date,time,createdAt,updatedAt,containerOutId,containerInId,jobSignOffStatusId,jobManagerSignOff,tippingPriceId,tipAndReturn,weight,notes,chargeable,weightStatusId,shredderDestructionDate,endDate,driverJobStatusId,complianceIssue,complianceNotes,tareWeight,transportSignOffNotes,subcontractorReg,timelineNotes,carriarSignature,carriarSignatureName,tippedSignature,tippedSignatureName,hasOverweight,newPrice,overridePrice,collectionOrder,weightNotes,createdBy,updatedBy,declined,declinedReason,collectionVehicleId,collectionDriverId,deliveryVehicleId,deliveryDriverId)
      VALUES(?,?,?,?,?,?,?,current_timestamp(),current_timestamp(),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
    `, [data.jobAssignmentId , data.jobStatusId, data.orderId, data.blockNumber, data.qty, data.date,data.time,data.containerOutId,data.containerInId,data.jobSignOffStatusId,data.jobManagerSignOff,data.tippingPriceId,data.tipAndReturn,data.weight,data.notes,data.chargeable,data.weightStatusId,data.shredderDestructionDate,data.endDate,data.driverJobStatusId,data.complianceIssue,data.complianceNotes,data.tareWeight,data.transportSignOffNotes,data.subcontractorReg,data.timelineNotes,data.carriarSignature,data.carriarSignatureName,data.tippedSignature,data.tippedSignatureName,data.hasOverweight,data.newPrice,data.overridePrice,data.collectionOrder,data.weightNotes,data.createdBy,data.updatedBy,'','',data.collectionVehicleId,data.collectionDriverId,data.deliveryVehicleId,data.deliveryDriverId]);
  }

  async getHelloResults() {
    const data = await this.repo.manager.query('select * from job');
    
   

    return {Jobs: data[0],anotherobject : "asdad"};

  }

  async Mobile_GetAllJobAssignmentsByDateAndDriver(SelectedDate : string ,  DriverId : string) {
    const data = await this.repo.manager.query("select distinct '' as UniqueID,ja.id,'' as jobID,ja.name,ja.vehicleId,v.vehicleTypeId from job_assignment ja inner join vehicle v on ja.vehicleId = v.id inner join job j on ja.id=j.jobAssignmentId where j.driverJobStatusId in (-1,1,2,3,4) and ja.date='" + SelectedDate + "' and ja.driverId='" +DriverId+"' and j.jobStatusId = 2;");
     
   

    return {Vehicles: data};

  }

  async Mobile_GetAllJobs(SelectedDate : string ,  DriverId : string) {
    const data = await this.repo.manager.query("select job.Id,job_assignment.Id from job   inner join job_status  on job.jobStatusId = job_status.id  inner join job_assignment  on job.jobAssignmentId=job_assignment.id  inner join `order` on `order`.id = job.orderId where job_assignment.date='" + SelectedDate +"' and job_assignment.driverId='" + DriverId + "'"); 
    const Order = await this.repo.manager.query("select o.* from job j inner join job_status js on j.jobStatusId = js.id inner join job_assignment ja on j.jobAssignmentId=ja.id inner join `order` o on o.id = j.orderId where ja.date='" + SelectedDate +"' and ja.driverId='" + DriverId + "'"); 
    
  
    const result = await await this.repo.createQueryBuilder('Job')
    .innerJoinAndSelect('Job.jobAssignment', 'jobAssignment').
    innerJoinAndSelect('Job.order', 'order')
    .leftJoinAndSelect('order.site', 'site')
    .leftJoinAndSelect('order.skipOrderType', 'skipOrderType')
    .leftJoinAndSelect('order.containerSizeType', 'containerSizeType')
    .leftJoinAndSelect('order.containerType', 'containerType')
    .leftJoinAndSelect('order.grade', 'grade')
    .leftJoinAndSelect('order.shredderOrderType', 'shredderOrderType')
    .leftJoinAndSelect('order.orderLines', 'orderLines')
    .leftJoinAndSelect('orderLines.quoteLine', 'quoteLine')
    .leftJoinAndSelect('orderLines.unit', 'orderLines.unit')
    .leftJoinAndSelect('quoteLine.product', 'product')
    .leftJoinAndSelect('product.unit', 'product.unit')
    .leftJoinAndSelect('order.tipSite', 'tipSite')
    .innerJoinAndSelect('Job.jobStatus', 'jobStatus').
    where('Job.jobStatusId = :StatusID', { StatusID: '2' }).    
    andWhere('jobAssignment.Date = :Date', { Date: SelectedDate }).
    andWhere('jobAssignment.driverId = :driverId', { driverId: DriverId }).
    andWhere('Job.driverJobStatusId in (-1,1,2,3,4)').

    

    getMany();
    /*
    .innerJoinAndSelect('Job.JobStatus', 'JobStatus')
    where('driverId.Date = :Date', { Date: SelectedDate })
    .andWhere('driverId.driverId = :driverId', { driverId: DriverId });
*/

// var j = [];

// j.push["jobs"] = result;



    return {Jobs: result };

  }

  async Mobile_GetAllQuestions() {
    const data = await this.repo.manager.query("select * from driver_checks"); 
    return {Questions: data};

  }

  async Mobile_SetAllAnswers(

 PQuestionID, PAnswerText, PUniqueID, Pid, PjobID, PVehicleTypeID, PActionType ,
 PdriverId, PvechileId, PcreatedAt, Pdescription, Presult,) {
  
    


    await this.repo.manager.query("call sp_Mobile_SetAllAnswers('"+ PdriverId +"','"+ PvechileId +"','"+ PcreatedAt +"','"+ Pdescription +"','"+ Presult +"','"+ PQuestionID +"','"+ PAnswerText +"','"+ PUniqueID +"','"+ Pid +"','"+ PjobID +"','"+ PVehicleTypeID +"','"+ PActionType +"')"); 
    
    // await this.repo.manager.query('CALL sp_Mobile_SetAllAnswers (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [
    //   PdriverId,
    //   PvechileId,
    //   PcreatedAt,
    //   Pdescription,
    //   Presult,
    //   PQuestionID,
    //   PAnswerText,
    //   PUniqueID,
    //   Pid,
    //   PjobID,
    //   PVehicleTypeID,
    //   PActionType
    // ]);
    
    
    return true; 

  }

  async Mobile_Set_UpdateMainJob(
    JobID : string,
    JobStatusID : string,
    DriverJobStatusID : string,
    JobUpdateDateTime : string) {
    await this.repo.manager.query("update job SET jobStatusId = '"+ JobStatusID +"' , driverJobStatusID = '"+ DriverJobStatusID +"' where id = '"+ JobID +"'");
  
    return true; 

  }

  async Mobile_Set_UpdateMainJob_Log(
    jobID 					: string ,
    VehicleID              : string
,DriverID               : string
,VehicleTypeID          : string
,CreatedAt              : string
,DriverJobStatusID      : string
,gpsLat                 : string
,gpsLong                : string
,CreatedBy              : string
) {
    await this.repo.manager.query("insert into driver_job_status_details(`vehicleId`,`driverId`,`jobId`,`date`,`time`,`driverJobStatusId`,`gpsLat`,`gpsLong`,`createdAt`,`updatedAt`) values('"+ VehicleID +"','"+ DriverID   +"','"+ jobID +"',DATE('"+ CreatedAt  +"'),TIME('" + CreatedAt + "') ,'"+ DriverJobStatusID +"','"+ gpsLat  +"','"+ gpsLong   +"',DATE('"+ CreatedAt  +"'),DATE('"+ CreatedAt  +"'))");
  
    return true; 

  }

  async Mobile_Set_UpdateTipTickets(jobId: string,collectionTicketNumber: string,createdBy: string,price: string,qty: string,unitId: string,isSignedOff: string,ticketNo: string,createdAt: string,updatedAt: string,deleted : string) {
    await this.repo.manager.query("insert into `tip_ticket`(`jobId`,`collectionTicketNumber`,`createdBy`,`price`,`qty`,`unitId`,`isSignedOff`,`ticketNo`,`createdAt`,`updatedAt`,`deleted`) values('"+ jobId+"','"+ collectionTicketNumber+"','"+ createdBy+"','"+ price+"','"+ qty+"','"+ unitId+"','"+ isSignedOff+"','"+ ticketNo+"','"+ createdAt+"','"+ updatedAt+"','"+ deleted + "')");
  
    return true; 

  }

  async Mobile_Set_UpdatePOD(driverId: string,vehicleId: string,jobId: string,qty: string,comments: string,signature: string,createdBy: string,createdAt: string,updatedAt: string) {
    await this.repo.manager.query("INSERT INTO `driver_job_movement`(`driverId`,`vehicleId`,`jobId`,`qty`,`comments`,`signature`,`createdBy`,`createdAt`,`updatedAt`) VALUES('" + driverId+ "','" +vehicleId+ "','" +jobId+ "','" +qty+ "','" +comments+ "','data:image/png;base64," +signature+ "','" +createdBy+ "','" +createdAt+ "','" + updatedAt + "')");
     
    return true; 

  }

  async Mobile_Set_UpdateClocking(CheckInDateTime : string,CheckOutDateTime : string,ActionType : string,UserId : string,gpsLat : string,gpsLong : string,createdBy : string,createdAt : string) {
   // await this.repo.manager.query("INSERT INTO `driver_hours`(`startTime`,`endTime`,`notes`,`driverId`,`gpsLat`,`gpsLong`,`createdBy`,`createdAt`) values ('" + CheckInDateTime+ "','" +CheckOutDateTime + "','" +ActionType + "','" +UserId + "','" +gpsLat + "','" +gpsLong + "','" +createdBy + "','" +createdAt +"')");
    await this.repo.manager.query("INSERT INTO `driver_hours`(`startTime`,`endTime`,`notes`,`driverId`,`createdBy`,`createdAt`) values ('" + CheckInDateTime+ "','" +CheckOutDateTime + "','" +ActionType + "','" +UserId + "','" +createdBy + "','" +createdAt +"')");
     
    return true; 

  }

  
  async Mobile_SET_UpdatePODs(
    PQuestionID : string,
    PAnswerText : string,
    PComments : string,
    PUniqueID : string,
    Pid : string,
    PjobID : string,
    PVehicleID : string,
    PVehicleTypeID : string,
    PCreatedAt : string,
    PCreatedBy : string, 
    PActionType : string ) {
    await this.repo.manager.query("call sp_Mobile_SetAllAnswers('"+ PQuestionID +"','"+ PAnswerText +"','"+ PComments +"','"+ PUniqueID +"','"+ Pid +"','"+ PjobID +"','"+ PVehicleID +"','"+ PVehicleTypeID +"','"+ PCreatedAt +"','"+ PCreatedBy +"','"+ PActionType +"')"); 
    return true; 

  }


}
