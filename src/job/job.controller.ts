
import { Job } from "./job.entity";
import { Crud, CrudController, CrudRequestInterceptor, ParsedRequest, CrudRequest, Action, Feature } from "@nestjsx/crud";
import { Controller, UseInterceptors, Post, Param, Body, Get } from "@nestjs/common";
import { JobService } from "./job.service";
import { PDFService } from "src/core/pdf.service";
import moment = require("moment");
import { Order } from "src/order/order.entity";
import { Account } from "src/account/account.entity";
/**
 * This file was generated by Four Ways Technology
 *
 * On Tue Aug 25 2020 13:55:19 GMT+0100 (British Summer Time)
 */
@Crud({
    model: {
      type: Job
    },
    query: {
      join: {
        order : {
          eager: true
        },
        "driverJobStatus": {
          eager: true,
        },
        "order.account": {
          eager: true,
        },
        "order.site": {
          eager: true,
        },
        "order.skipOrderType": {
          eager: true,
        },
        "order.containerSizeType": {
          eager: true,
        },
        "order.containerType": {
          eager: true
        },
        "order.grade": {
          eager: true
        },
        "order.shredderOrderType": {
          eager: true
        },

        // these are optional eager: false and are loaded on pages like signoff
        jobAssignment: {
          eager: false,
        },
        tippingPrice: {
          eager: false,
        },
        "jobAssignment.vehicle": {
          eager: false,
        },
        "jobAssignment.driver": {
          eager: false,
        },
        "jobAssignment.subcontractor": {
          eager: false,
        },
        "jobAssignment.trailer": {
          eager: false,
        },
        "order.orderLines": {
          eager: false,
        },
        "order.tipSite": {
          eager: false,
        },
        "createdUser": {
          eager: false,
        },
        "updatedUser": {
          eager: false,
        },
        "jobStatus": {
          eager: false,
        },
      }
    }
  })
  @Controller('job')
  @Feature('job')
  export class JobController implements CrudController<Job> {
    constructor(public service: JobService, public pdfService: PDFService) {}


    @UseInterceptors(CrudRequestInterceptor)
    @Action('app-waste-transfter-note')
    @Post('app-waste-transfer-note/')
    async appWasteTransferNote(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {

      const job = <Job>data.job;
      const extra = await this.service.getExtraDetailsForNote(job.order.account.id, job.order.tipSiteId, job.order.account.sicId);

      let template = "waste-transfer-note-total";

      await this.pdfService.createPDFUsingTemplate('app-' + template, __dirname + '/../../assets/waste-transfer-note/app-'+ job.id, {job: job, address: this.getAddressDetails(job.order.site), extra: extra});

      return {fileName: '/waste-transfer-note/app-'+ job.id + '.pdf'};
    }

    @UseInterceptors(CrudRequestInterceptor)
    @Action('waste-transfter-note')
    @Post('waste-transfer-note/')
    async wasteTransferNote(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {

      const job = <Job>data.job;

      let find = '%REPLACE%';
      let re = new RegExp(find, 'g');
      data.invoiceInfo.wasteTransferTermsBlockA = data.invoiceInfo.wasteTransferTermsBlockA.replace(re, data.invoiceInfo.companyName);
      data.invoiceInfo.wasteTransferTermsBlockB = data.invoiceInfo.wasteTransferTermsBlockB.replace(re, data.invoiceInfo.companyName);

      const extra = await this.service.getExtraDetailsForNote(job.order.account.id, job.order.tipSiteId, job.order.account.sicId);

      let template = "waste-transfer-note";
      if(data.invoiceInfo.wasteTransferNoteTemplate) {
        template = data.invoiceInfo.wasteTransferNoteTemplate;
      }

      await this.pdfService.createPDFUsingTemplate(template, __dirname + '/../../assets/waste-transfer-note/'+ job.id, {job: job, address: this.getAddressDetails(job.order.site), extra: extra, invoiceInfo: data.invoiceInfo});

      return {fileName: '/waste-transfer-note/'+ job.id + '.pdf'};
    }


    @UseInterceptors(CrudRequestInterceptor)
    @Action('timelinePdf')
    @Post('timeline-pdf/')
    async timelinePDF(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {
      
      const jobItems = [];

      
      let units = await this.service.getAllUnits();

      const allJobs = [];
      const noJobs = [];
      const foundJobs = [];

      data.forEach((dataItem) => {
        let validJobs = dataItem.jobs.filter(j => j.jobStatusId === 2).length > 0;

        if(dataItem.jobs.length > 0 && validJobs) {
    
 
          dataItem.jobs.forEach(job => {

            if(foundJobs.indexOf(job.jobAssignmentId + '-' + job.blockNumber) === -1) {


              foundJobs.push(job.jobAssignmentId + '-' + job.blockNumber);



              job.address = this.getJobAddressDetails(job.order, true);
              job.siteAddress = this.getSiteAddress(job.order.site, true);
              job.tipSiteAddress = this.getAddressDetails(job.order.tipSite, true);
    

              if(job.order.orderLines[0]) {

                let unit = units.filter(u => u.id === job.order.orderLines[0].unitId)[0];
                
                if(unit) {
                  job.unit = unit.name;
                } else {
                  job.unit = '';
                }

                job.unitText = 'By the ';

                job.unitText = job.unit === 'Load' || job.unit === 'Tonne' ? job.unitText + ' ' + job.unit : '';

                if(job.unit === 'Day') {
                  job.unitText = 'Day Hire';
                }

                if(job.unit === 'hour') {
                  job.unitText = 'Timehire';
                }
  
                job.productName = job.order.orderLines[0].name;
              } else {
                job.productName = '';
                job.unit = '';
              }

              job.notes = dataItem.notes !== null && dataItem.notes !== undefined && dataItem.notes !== '' ? dataItem.notes + ' ' + job.notes : job.notes;
              job.assignment = dataItem;
              allJobs.push(job);
          }
          });
        } else if(dataItem.jobs.length == 0) {
          noJobs.push(dataItem);
        }
      })


      let newData = [];

      data.forEach((dataItem) => {
        let validJobs = dataItem.jobs.filter(j => j.jobStatusId === 2).length > 0;

        if(validJobs) {
          newData.push(dataItem);
        }
      })

  

      await this.pdfService.createPDFUsingTemplate('timeline', __dirname + '/../../assets/timeline/sheet', {date: moment(data[0].date).format('DD/MM/YYYY'), data: newData, jobs: allJobs, noJobs: noJobs});

      
      return {fileName: '/timeline/sheet.pdf'};
    }

  @UseInterceptors(CrudRequestInterceptor)
    @Feature('ticket-match')
    @Get('ticket-match/')
    async ticketMatch(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {

      const ticketNo = '43259';

      return await this.service.findByTicketNo(ticketNo);

    }

    @UseInterceptors(CrudRequestInterceptor)
    @Feature('job-sepa')
    @Post('job-sepa/')
    async jobSepa(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {

      let tipSiteId: number = data.tipSiteId;

      if(tipSiteId === null || tipSiteId === undefined) {
        tipSiteId = -1;
      }

      let startDate: string = data.startDate;

      if(startDate === null || startDate === undefined) {
        startDate = '';
      }

      let endDate: string = data.endDate;

      if(endDate === null || endDate === undefined) {
        endDate = '';
      }
 
      return await this.service.getJobsForSepaReport(tipSiteId, startDate, endDate);

    }


    @UseInterceptors(CrudRequestInterceptor)
    @Feature('destruction-pdf')
    @Post('destruction-pdf/')
    async destructionPdf(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {

      const job = <Job>data.job;

      if(!job.shredderDestructionDate) {
        job.shredderDestructionDate = moment(job.date).format('YYYY-MM-DD');

        await this.service.updateJob(job);
      }

      await this.pdfService.createPDFUsingTemplate('shredding', __dirname + '/../../assets/shredding/'+ job.id, {job: job, address: this.getAddressDetails(job.order.site)});

      return {fileName: '/shredding/'+ job.id + '.pdf'};
    }

    @Get('getJobsForTransport/:orderTypeId/:date')
    async getJobsForTransport(@Param('date') date:string, @Param('orderTypeId') orderTypeId: number) {
      return this.service.getJobsByDateForTransport(date, +orderTypeId);
    }

    private getJobAddressDetails(record:Order, inline:boolean=false): string {
      let address = '';
  
      if (record.contactAddressLine1.trim() !== '') {
        address += record.contactAddressLine1 + (inline ? ',' : '<br />');
      }
  
      if (record.contactAddressLine2.trim() !== '') {
        address += record.contactAddressLine2 + (inline ? ',' : '<br />');
      }

      if (record.contactAddressLine3.trim() !== '') {
        address += record.contactAddressLine3 + (inline ? ',' : '<br />');
      }
  
      if (record.contactCity.trim() !== '') {
        address += record.contactCity + (inline ? ',' : '<br />');
      }
  
      if (record.contactCountry.trim() !== '') {
        address += record.contactCountry + (inline ? ',' : '<br />');
      }
  
      if (record.contactPostCode.trim() !== '') {
        address += record.contactPostCode;
      }
  
      return address;
    }

  private getAddressDetails(record, inline:boolean=false): string {
    let address = '';

    if (record.billingAddress1.trim() !== '') {
      address += record.billingAddress1 + (inline ? ',' : '<br />');
    }

    if (record.billingAddress2.trim() !== '') {
      address += record.billingAddress2 + (inline ? ',' : '<br />');
    }

    if (record.billingCity.trim() !== '') {
      address += record.billingCity + (inline ? ',' : '<br />');
    }

    if (record.billingCountry.trim() !== '') {
      address += record.billingCountry + (inline ? ',' : '<br />');
    }

    if (record.billingPostCode.trim() !== '') {
      address += record.billingPostCode;
    }

    return address;
  }

  getSiteAddress(record: Account, inline:boolean=false) {
    let address = '';

    if (record.shippingAddress1.trim() !== '') {
      address += record.shippingAddress1 + (inline ? ',' : '<br />');
    }

    if (record.shippingAddress2.trim() !== '') {
      address += record.shippingAddress2 + (inline ? ',' : '<br />');
    }

    if (record.shippingCity.trim() !== '') {
      address += record.shippingCity + (inline ? ',' : '<br />');
    }

    if (record.shippingCountry.trim() !== '') {
      address += record.shippingCountry + (inline ? ',' : '<br />');
    }

    if (record.shippingPostCode.trim() !== '') {
      address += record.shippingPostCode;
    }

    return address;
  }

  @Action('Mobile_GetAllJobAssignmentsByDateAndDriver')
  @Post('Mobile_GetAllJobAssignmentsByDateAndDriver')
    async Mobile_GetAllJobAssignmentsByDateAndDriver(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {
  //    return "testing123";
      return this.service.Mobile_GetAllJobAssignmentsByDateAndDriver(data.SelectedDate,data.DriverId);
    }

  @Action('Mobile_GetAllJobs')
  @Post('Mobile_GetAllJobs')
  async Mobile_GetAllJobs(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {
  //    return "testing123";
    return this.service.Mobile_GetAllJobs(data.SelectedDate,data.DriverId);
  }
  
  @Action('Mobile_GetAllQuestions')
  @Post('Mobile_GetAllQuestions')
  async Mobile_GetAllQuestions(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {
  //    return "testing123";
    return this.service.Mobile_GetAllQuestions();
  }

  
  @Action('Mobile_SetAllAnswers')
  @Post('Mobile_SetAllAnswers')
  async Mobile_SetAllAnswers(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) 
  {
    //  return "testing123"; ,data[i].VehicleID
    try {

    for (var i=0;i<data.length; i++) {
      console.log(i);
      this.service.Mobile_SetAllAnswers(data[i].PQuestionID,data[i].PAnswerText  ,
        data[i].PUniqueID  ,data[i].Pid,  data[i].PjobID  ,data[i].PVehicleTypeID,
        data[i].PActionType,
         parseInt(data[i].PDriverID),
      parseInt(  data[i].PVehicleID),
        data[i].PCreatedAt,

        data[i].PDescription
         ,data[i].PAnswerText.toLowerCase()=="yes"?1:0 );
    }


      return true;
      
    
  } catch (error) {
    // Handle the error

    return error;
   // console.error('An error occurred:', error.message);
  }
 
     
  } 


  @Action('Mobile_Set_UpdateMainJob')
  @Post('Mobile_Set_UpdateMainJob')
  async Mobile_Set_UpdaeMainJob(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {
    //  return "testing123";
    for (var i=0; i<=data.length-1; i++) {
      this.service.Mobile_Set_UpdateMainJob(data[i].JobID ,data[i].JobStatusID 	,data[i].DriverJobStatusID ,data[i].JobUpdateDateTime);
    }
      return true; 
  } 
  
  
  @Action('Mobile_Set_UpdateMainJob_Log')
  @Post('Mobile_Set_UpdateMainJob_Log')
  async Mobile_Set_UpdateMainJob_Log(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {

    for (var i=0; i<=data.length-1; i++) {
      this.service.Mobile_Set_UpdateMainJob_Log(data[i].jobID,data[i].VehicleID,data[i].DriverID  ,data[i].VehicleTypeID  ,data[i].CreatedAt,data[i].DriverJobStatusID,data[i].gpsLat ,data[i].gpsLong,data[i].CreatedBy);
    }

      return true; 
  } 
  
  @Action('Mobile_Set_UpdateTipTickets')
  @Post('Mobile_Set_UpdateTipTickets')
  async Mobile_Set_UpdateTipTickets(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {

    for (var i=0; i<=data.length-1; i++) {
      this.service.Mobile_Set_UpdateTipTickets(data[i].jobId,data[i].collectionTicketNumber,data[i].createdBy,data[i].price,data[i].qty,data[i].unitId,data[i].isSignedOff,data[i].ticketNo,data[i].createdAt,data[i].updatedAt,data[i].deleted);
    }

      return true; 
  } 
  
  @Action('Mobile_Set_UpdatePOD')
  @Post('Mobile_Set_UpdatePOD')
  async Mobile_Set_UpdatePOD(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {

    for (var i=0; i<=data.length-1; i++) {
      this.service.Mobile_Set_UpdatePOD(data[i].driverId,data[i].vehicleId,data[i].jobId,data[i].qty,data[i].comments,data[i].signature,data[i].createdBy,data[i].createdAt,data[i].updatedAt);
    }

      return true; 
  } 
  

  @Action('Mobile_Set_UpdateClocking')
  @Post('Mobile_Set_UpdateClocking')
  async Mobile_Set_UpdateClocking(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {

   for (var i=0; i<=data.length-1; i++) {
      this.service.Mobile_Set_UpdateClocking(data[i].CheckInDateTime,data[i].CheckOutDateTime,data[i].ActionType,data[i].UserId,data[i].gpsLat,data[i].gpsLong,data[i].createdBy,data[i].createdAt);
    }

      return true; 
  } 
  
  @Post('sayhello/')
    async sayhello() {
      return "testing123";
    }

  }