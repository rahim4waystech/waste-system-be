
import { Messaging } from "./messaging.entity";
import { Crud, CrudController, Feature, CrudRequestInterceptor, Action, ParsedRequest, CrudRequest } from "@nestjsx/crud";
import { Controller, UseInterceptors, Post, Param, Get } from "@nestjs/common";
import { MessagingService } from "./messaging.service";
import { JobService } from "src/job/job.service";
import { MailService } from "src/core/mail.service";
/**
 * This file was generated by Four Ways Technology
 *
 * On Tue Mar 16 2021 13:50:02 GMT+0000 (Greenwich Mean Time)
 */
@Crud({
    model: {
      type: Messaging
    }
  })
  @Controller('messaging')
  @Feature('messaging')
  export class MessagingController implements CrudController<Messaging> {
    constructor(
      public service: MessagingService,
      public jobService: JobService,
      public mailService: MailService,
    ) {}

    @UseInterceptors(CrudRequestInterceptor)
    @Post('sendMessage/:id')
    @Action('sendMessage')
    async sendMessage(@ParsedRequest() req: CrudRequest, @Param() params) {
      const jobId:number = parseInt(params.id);

      // Only enable this for skip just now
      const job = await this.jobService.getJobById(jobId);

      if(!job) {
        return {
          status: 'Sent',
          method: 'email'
        };
      }
      if(job.order.orderTypeId !== 1) {
        return {
          status: 'Sent',
          method: 'email'
        };
      }
      // const job = await this.jobService.get

      // status return = Sent/Failed
      // method return = email/sms/failed to send

      let toAddress = job.order.site.email;

      if(!toAddress || toAddress === '') {
        toAddress = job.order.account.email;
      }

      await this.mailService.sendEmailWithTemplate(toAddress, "Your order is on the way", 'order-on-way', {job: job});


      return {
        status: 'Sent',
        method: 'email'
      };
    }
  }
