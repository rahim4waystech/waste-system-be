
import { Order } from "./order.entity";
import { Crud, CrudController, CrudRequestInterceptor, ParsedRequest, CrudRequest, Feature, Action } from "@nestjsx/crud";
import { Controller, UseInterceptors, Get, Param, Post, Body, Query } from "@nestjs/common";
import { OrderService } from "./order.service";
import { features } from "process";
import { query } from "express";
import { ArticSheetService } from "src/core/artic-sheet.service";
/**
 * This file was generated by Four Ways Technology
 * 
 * On Mon Aug 10 2020 15:40:35 GMT+0100 (British Summer Time)
 */
@Crud({
  model: {
    type: Order
  },
  query: {
    join: {
      orderType: {
        eager: true
      },
      account: {
        eager: true,
      },
      site: {
        eager: true,
      },
      orderStatus: {
        eager: true,
      },
      skipOrderType: {
        eager: true,
      },
      containerSizeType: {
        eager: true,
      },
      "containerSizeType.unit": {
        eager: true,
      },
      containerType: {
        eager: true,
      },
      grade: {
        eager: true,
      },
      updatedUser: {
        eager: false,
      },
      contract: {
        eager: false,
      },
      orderLines: {
        eager: false,
      },
      "tipSite": {
        eager: false,
      },
    }
  }
})
@Controller('order')
@Feature('order')
export class OrderController implements CrudController<Order> {
  constructor(public service: OrderService) { }


  @UseInterceptors(CrudRequestInterceptor)
  @Post('accept/:id')
  @Action('accept')
  async acceptOrder(@ParsedRequest() req: CrudRequest, @Param() params) {
    return this.service.acceptOrder(params.id);
  }

  @Get('shredding/:date')
  @Action('shredding')
  async shreddingOrders(@Query('page') page: number, @Query('search') search: string = '', @Query('sort') sort: string = 'time', @ParsedRequest() req: CrudRequest, @Param() params) {
    return this.service.getOrdersForShredding(params.date, page, 5, search, sort);
  }

  @Get('same-customer-and-site')
  @Action('same-customer-and-site')
  async sameCustomerAndSite(@ParsedRequest() req: CrudRequest, @Param() params) {
    return await this.service.getSameCustomerAndSite();
  }

  @UseInterceptors(CrudRequestInterceptor)
  @Action('decline')
  @Post('decline/:id')
  async declineOrder(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {

    return this.service.declineOrder(params.id, data['reason']);
  }

  @UseInterceptors(CrudRequestInterceptor)
  @Action('copyToDates')
  @Post('copyToDates')
  async copyOrderToDates(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {
    const orderId: number = data['orderId'];
    let dates: any = data['dates'];

    if (!orderId || orderId === -1) {
      throw new Error('copyToDates must have a valid orderId');
    }

    if (!dates || dates === '') {
      throw new Error('copyToDates must have dates');
    }

    dates = dates.split(',');

    return this.service.copyOrderToDates(orderId, dates);
  }


  /** New Work **/
  @UseInterceptors(CrudRequestInterceptor)
  @Post('artic-sheet')
  @Action('artic-sheet')
  async articSheet(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {
    let sheetData = data.data;
    let articSheet = new ArticSheetService();
    return { data: JSON.parse(articSheet.parseSheet(sheetData)) };
  }

  @UseInterceptors(CrudRequestInterceptor)
  @Post('order-service-2')
  @Action('order-service-2')
  async orderService(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {
    let sheetData = data;
    return this.service.findOrderIdFromProductName(data);
  }
  @UseInterceptors(CrudRequestInterceptor)
  @Post('order-service-save')
  @Action('order-service-save')
  async SaveOrderProvision(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {
    let sheetData = data;
    return this.service.SaveOrderProvision(data);
  }
  @Get('ArticProvissionOrders')
  @Action('ArticProvissionOrders')
  async ArticOrders(@ParsedRequest() req: CrudRequest) {
    return this.service.ArticProvissionOrders();
  }
  @UseInterceptors(CrudRequestInterceptor)
  @Post('UpdateOrderProvisionAllocation')
  @Action('UpdateOrderProvisionAllocation')
  async UpdateOrderProvisionAllocation(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {

    return this.service.UpdateOrderProvisionAllocation(data);
  }
}
