
import { Vehicle } from "./vehicle.entity";
import { Injectable } from "@nestjs/common";
import { InjectRepository } from "@nestjs/typeorm";

import { TypeOrmCrudService } from "@nestjsx/crud-typeorm";
import { VehicleDetailsService } from "src/vehicledetails/vehicledetails.service";
import { AssetRegisterService } from "src/asset-register/asset-register.service";
import { AssetRegister } from "src/asset-register/asset-register.entity";
import { VehicleDetails } from "src/vehicledetails/vehicledetails.entity";
import { VehicleVOR } from "src/vehicle-vor/vehicle-vor.entity";
import { isObject } from "util";
import moment = require("moment");
import { InspectionDates } from "src/inspection-dates/inspection-dates.entity";
import { InspectionDatesService } from "src/inspection-dates/inspection-dates.service";
import { VehicleInspectionAssignments } from "src/vehicleinspectionassignments/vehicleinspectionassignments.entity";
import { VehicleInspectionAssignmentsService } from "src/vehicleinspectionassignments/vehicleinspectionassignments.service";

/**
 * This file was generated by Four Ways Technology
 * 
 * On Fri Aug 07 2020 15:04:21 GMT+0100 (British Summer Time)
 */
@Injectable()
export class VehicleService extends TypeOrmCrudService<Vehicle> {
  constructor(@InjectRepository(Vehicle) repo, private vehicleDetailsService: VehicleDetailsService,
  private inspectionDatesService: InspectionDatesService,
  private vehicleInspectionAssignmentsService: VehicleInspectionAssignmentsService,
  private assetRegisterService: AssetRegisterService) {
    super(repo);
  }

  async getVehiclesByVehicleType(vehicleTypeId: number=-1) {
    return await this.repo.find({
      where: {
        vehicleTypeId: vehicleTypeId,
      }
    })
  }


  async getVehiclesByVehicleTypeByName(vehicleTypeName: string) {
    return await this.repo.find({
  
      where: {
        vechiletypename: vehicleTypeName,
      }
    })
  }
  async importData(data) {
    const lines = data.split('\n');
    
    for(let i = 1; i < lines.length; i++) {
      const line = lines[i];
      const fields = line.split(",");

      let vehicle:any = new Vehicle();
      let asset: any = new AssetRegister();
      let vehicleDetails: any = new VehicleDetails();

      // fields for assets
      asset.asset = fields[5];
      asset.assetSerial = fields[0].trim();
      asset.category = {id: this.getAssetCategoryId(fields[5])};
      asset.categoryId = this.getAssetCategoryId(fields[5]);
      asset.depotId = this.getDepotId(fields[6]);
      asset.depot = {id: this.getDepotId(fields[6])};
      asset.description = fields[4];
      asset.entity = "";
      asset.entityId = -1;
      asset.make = fields[2];
      asset.model = fields[3];
      asset.purchaseDate = null;
      asset.dateOfRegistration = fields[7].trim() !== '' ? moment(fields[7], 'DD-MM-YYYY').format('YYYY-MM-DD') : null;
      asset.purchaseDate = fields[8].trim() !== '' ? moment(fields[8] + '-01-01').format('YYYY-MM-DD'): null;
      asset.value = 0;
      asset.createdBy = 1;

      asset = await this.assetRegisterService.createDTO(asset);
      
      if(fields[5] === 'Vehicle' || fields[5] === 'Trailer') {
        vehicleDetails.co2Emissions = '';
        vehicleDetails.dateOfFirstRegistration = null;
        vehicleDetails.engineCylinderCapacity = 0;
        vehicleDetails.inspectionIntervalId = -1;
        vehicleDetails.typeApproval = '';
        vehicleDetails.wheelPlan = '';
        vehicleDetails.yearOfManufacture = '';
        vehicleDetails.createdBy = 1;

        vehicleDetails = await this.vehicleDetailsService.createDTO(vehicleDetails);

        vehicle.active = true;
        vehicle.createdBy = 1;
        vehicle.asset = {id: asset.id};
        vehicle.assetId = asset.id;
        vehicle.createdBy = 1;


        vehicle.depot = {id: this.getDepotId(fields[6])};
        vehicle.depotId = this.getDepotId(fields[6]);


        vehicle.detailId = -1;
        vehicle.fuelType = {id: 1};
        vehicle.fuelTypeId = 1;
        vehicle.lastServiceDate = null;
        vehicle.make = fields[2];
        vehicle.model = fields[3];
        vehicle.notes = '';
        vehicle.registration = fields[0].trim();
        vehicle.tareWeight = 0;
        vehicle.vinNumber = fields[1];
 
        vehicle.name = fields[1];
        vehicle.detail = {id: vehicleDetails.id};
        vehicle.detailId = vehicleDetails.id;
        

        if(fields[5] === 'Trailer') {
          vehicle.secondaryVehicleType = {id: this.getSecondaryType(fields[4])};
          vehicle.secondaryVehicleTypeId = this.getSecondaryType(fields[4]);
          vehicle.vehicleType = 7;
          vehicle.vehicleTypeId =7;
        } else {
          vehicle.vehicleType = {id: this.getVehicleType(fields[4])};
          vehicle.vehicleTypeId = this.getVehicleType(fields[4]);
        }

        // add inspection date based on intervals

        // inspection

       
        vehicle = await this.createDTO(vehicle);
        if(fields[9].trim() !== "" && fields[9].trim() !== 'VOR' && fields[9].trim() !== 'N/A'){
          const inspectionDate = new InspectionDates();
          inspectionDate.defectId = "-1";
          inspectionDate.defect = {id: -1} as any;
          inspectionDate.vehicleId = vehicle.id;
          inspectionDate.vehicle = {id: vehicle.id} as any;
          inspectionDate.date = moment(fields[9].trim(), 'DD-MM-YYYY').format('YYYY-MM-DD');
          inspectionDate.inspectionIntervalId = "1";
          inspectionDate.inspectionInterval = {id: 1} as any;

          await this.inspectionDatesService.createDTO(inspectionDate);


          // create assignment record
          const assignment = new VehicleInspectionAssignments();
          assignment.createdBy = 1;
          assignment.vehicleDetailId = vehicleDetails.id;
          assignment.vehicleInspectionIntervalId = 1;
          assignment.vehicleInspectionInterval = {id: 1} as any;

          await this.vehicleInspectionAssignmentsService.createDTO(assignment);
        }

       // mot
       if(fields[11].trim() !== "" && fields[11].trim() !== 'VOR' && fields[11].trim() !== 'N/A') {
        const inspectionDate = new InspectionDates();
        inspectionDate.defectId = "-1";
        inspectionDate.defect = {id: -1} as any;
        inspectionDate.vehicleId = vehicle.id;
        inspectionDate.vehicle = {id: vehicle.id} as any;
        inspectionDate.date = moment(fields[11].trim(), 'DD-MM-YYYY').format('YYYY-MM-DD');
        inspectionDate.inspectionIntervalId = "2";
        inspectionDate.inspectionInterval = {id: 2} as any;

        await this.inspectionDatesService.createDTO(inspectionDate);

        // create assignment record
        const assignment = new VehicleInspectionAssignments();
        assignment.createdBy = 1;
        assignment.vehicleDetailId = vehicleDetails.id;
        assignment.vehicleInspectionIntervalId = 2;
        assignment.vehicleInspectionInterval = {id: 2} as any;

        await this.vehicleInspectionAssignmentsService.createDTO(assignment);
      }

      // taco
      if(fields[13].trim() !== "" && fields[13].trim() !== 'VOR' && fields[13].trim() !== 'N/A') {
        const inspectionDate = new InspectionDates();
        inspectionDate.defectId = "-1";
        inspectionDate.defect = {id: -1} as any;
        inspectionDate.vehicleId = vehicle.id;
        inspectionDate.vehicle = {id: vehicle.id} as any;
        inspectionDate.date = moment(fields[13].trim(), 'DD-MM-YYYY').format('YYYY-MM-DD');
        inspectionDate.inspectionIntervalId = "2";
        inspectionDate.inspectionInterval = {id: 3} as any;

        // create assignment record
        const assignment = new VehicleInspectionAssignments();
        assignment.createdBy = 1;
        assignment.vehicleDetailId = vehicleDetails.id;
        assignment.vehicleInspectionIntervalId = 3;
        assignment.vehicleInspectionInterval = {id: 3} as any;

        await this.vehicleInspectionAssignmentsService.createDTO(assignment);

        await this.inspectionDatesService.createDTO(inspectionDate);
      }


     
      
  
      }
    }
  }

  public async createDTO(dto: any) {
    return await this.repo.save(dto);
  }

  private getSecondaryType(description:string) {

    if(description === 'CURTAIN STEP FRAME') {
      return 1;
    }
    if(description === 'EJECTION') {
      return 2;
    }

    if(description === 'FLAT BED') {
      return 3;
    }
    if(description === 'HEAVY STEP FRAME') {
      return 4;
    }
    if(description === 'HOOK TRAILER') {
      return 5;
    }
    if(description === 'LOW LOADER') {
      return 6;
    }
    if(description === 'SKIP TRAILER') {
      return 7;
    }
    if(description === 'STEP FRAME') {
      return 8;
    }
    if(description === 'TANKER') {
      return 9;
    }
    if(description === 'TIPPING TRAILER') {
      return 10;
    }
    if(description === 'VINTAGE') {
      return 11;
    }
    if(description === 'WALKING FLOOR') {
      return 12;
    }

  }

  private getDepotId(depotName: string) {
    if(depotName === 'Neilston') {
      return 1;
    }

    if(depotName === 'Darnley') {
      return 10;
    }

    if(depotName === 'Paisley') {
      return 12;
    }
  }

  private getAssetCategoryId(assetName: string) {
    if(assetName === 'Equipment') {
      return 2;
    }

    if(assetName === 'Plant') {
      return 3;
    }

    if(assetName === 'Trailer') {
      return 4;
    }

    if(assetName === 'Vehicle') {
      return 1;
    }
  }

  getVehicleType(vehicleTypeName: string) {

    if(vehicleTypeName.trim() === 'TIPPER') {
      return 1;
    }

    if(vehicleTypeName.trim() === 'TANKER') {
      return 13;
    }

    if(vehicleTypeName.trim() === "ARTIC") {
      return 6;
    }

    if(vehicleTypeName.trim()=== "BIN") {
      return 14;
    }

    if(vehicleTypeName.trim() === "BRIMEC") {
      return 12;
    }
    
    if(vehicleTypeName.trim() === 'SKIPS') {
      return 1;
    } 

    if(vehicleTypeName.trim() === 'HOOK') {
      return 2;
    }
  }
}
