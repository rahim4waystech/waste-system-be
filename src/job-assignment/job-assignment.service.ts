
import { JobAssignment } from "./job-assignment.entity";
import { Injectable } from "@nestjs/common";
import { InjectRepository } from "@nestjs/typeorm";

import { TypeOrmCrudService } from "@nestjsx/crud-typeorm";
import moment = require("moment");

/**
 * This file was generated by Four Ways Technology
 * 
 * On Tue Aug 25 2020 13:47:39 GMT+0100 (British Summer Time)
 */
@Injectable()
export class JobAssignmentService extends TypeOrmCrudService<JobAssignment> {
  constructor(@InjectRepository(JobAssignment) repo) {
    super(repo);
  }
  async saveDTO(dto) {
    return await this.repo.save(dto);
  }

  async getNextSlotId(date: string, orderTypeId: number=1) {
    if(!date || date === '') {
      throw new Error('You must provide a valid date in getNextSlotId');
    }

    if(!orderTypeId || orderTypeId === -1) {
      throw new Error('You must provide a valid orderTypeId for getNextSlotId');
    }
    return await this.repo.query(`
      select max(slotNumber) as maxSlotId from job_assignment
      where date = ?
      and orderTypeId = ?
    `, [date, orderTypeId]);
  }

  async getAllForDateAndOrderType(date: string='', orderTypeId: number=-1) {
    return this.repo.find({
      where: {
        date: date,
        orderTypeId: orderTypeId,
      }
    });
  }

  async getAbsence(date) {
    if(!date || date === '') {
      throw new Error('You must provide a date for getAbsence');
    }

    return await this.repo.manager.query('select * from driver_absence where startDate >= ? and endDate <= ?', [date, date]);
  }

  async getAllocationForToday(date:string='', orderTypeId: number=-1) {
    return await this.find({
      relations: ['vehicle', 'driver', 'subcontractor'],
      where:{
        date: date,
        orderTypeId: orderTypeId,
      }
    });
  }

  async getAllocationForPreviousDay(date:string='', orderTypeId: number=-1) {

    // it's sunday substract two
    let yesterday = '';
    if(moment(date).isoWeekday() === 7) {
      yesterday = moment(date).subtract(2, 'days').format('YYYY-MM-DD');
    } else {
      yesterday = moment(date).subtract(1, 'days').format('YYYY-MM-DD');
    }

    return await this.find({
      relations: ['vehicle', 'driver', 'subcontractor'],
      where:{
        date: yesterday,
        orderTypeId: orderTypeId,
      }
    });
  }

  async getVOR(date) {
    if(!date || date === '') {
      throw new Error('You must provide a date for getVOR');
    }

    return await this.repo.manager.query('select * from vehicle_vor where startDate >= ? and endDate <= ?', [date, date]);

  }
}
