
import { CreditNote } from "./credit-note.entity";
import { Action, Crud, CrudController, CrudRequest, CrudRequestInterceptor, ParsedRequest } from "@nestjsx/crud";
import { Body, Controller, Param, Post, UseInterceptors } from "@nestjs/common";
import { CreditNoteService } from "./credit-note.service";
import { PDFService } from "src/core/pdf.service";
import moment = require("moment");
import { InvoiceItemService } from "src/invoice-item/invoice-item.service";
import { InvoiceService } from "src/invoice/invoice.service";
import { MailService } from "src/core/mail.service";

import * as fs from'fs';

/**
 * This file was generated by Four Ways Technology
 *
 * On Tue Aug 10 2021 14:09:57 GMT+0100 (British Summer Time)
 */
@Crud({
  model: {
    type: CreditNote
  },
  query: {
    join: {
      invoice: {
        eager: false,
      },
      "invoice.account": {
        eager: false,
      }
    }
  }
})
@Controller('credit-note')
export class CreditNoteController implements CrudController<CreditNote> {
  constructor(public service: CreditNoteService,
    private invoiceItemService: InvoiceItemService,
    private invoiceService: InvoiceService,
    private mailService: MailService,
    private pdfService: PDFService) { }


    @UseInterceptors(CrudRequestInterceptor)
    @Post('email/:id')
    @Action('email')
    async email(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {
      const creditNoteId = data.creditNoteId;
      const toEmail = data.toEmail;
      const message = data.message;
  
      const attachments = [];
      // generate
      await this.pdf(req, params, data);
  
      attachments.push({
        filename:  creditNoteId + '.pdf',
        content: fs.createReadStream( __dirname + '/../../assets/creditnote/' + creditNoteId + '.pdf')
    });
    
      await this.mailService.sendEmailWithTemplate(toEmail, "Waste System | Credit Note", 'generic',{message: message.replace(/(?:\r\n|\r|\n)/g, '<br>')}, attachments);
  
  
      return {};
    }

  @UseInterceptors(CrudRequestInterceptor)
  @Action('pdf')
  @Post('pdf/:id')
  async pdf(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {

    const creditNote = await this.service.findOne(params.id);

    const invoice = await this.invoiceService.findOne(creditNote.invoiceId, { relations: ['account', 'taxType'] });

    const vatPercentage = <any>invoice.taxType.rate / 100;

    await this.pdfService.createPDFUsingTemplate(data.invoicingInfo.headedCreditNoteTemplate, __dirname + '/../../assets/creditnote/' + creditNote.id, {
      datasets: [
        {
          creditNoteNumber: 'CN-' + creditNote.id,
          creditNoteDate: moment(creditNote.date).format('DD/MM/YYYY'),
          subtotal: (creditNote.value).toFixed(2),
          vatTotal: (creditNote.value * vatPercentage).toFixed(2),
          total: ((creditNote.value) + (creditNote.value * vatPercentage)).toFixed(2),
          description: creditNote.description,
          value: creditNote.value.toFixed(2),
          invoiceSettings: data.invoicingInfo,
          customerAddress: this.getAddressDetails(invoice.account),
          customerRef: invoice.account.accountRef,
          invoice: invoice,
          invoiceNumber: data.invoicingInfo.invoicePrefix + invoice.id,
        }
      ]
    });

    return { fileName: '/creditnote/' + creditNote.id + '.pdf' };

  }

  private getAddressDetails(record): string {
    let address = record.name + '<br />';

    if (record.billingAddress1.trim() !== '') {
      address += record.billingAddress1 + '<br />';
    }

    if (record.billingAddress2.trim() !== '') {
      address += record.billingAddress2 + '<br />';
    }

    if (record.billingCity.trim() !== '') {
      address += record.billingCity + '<br />';
    }

    if (record.billingCountry.trim() !== '') {
      address += record.billingCountry + '<br />';
    }

    if (record.billingPostCode.trim() !== '') {
      address += record.billingPostCode;
    }

    return address;
  }
}
