
import { Invoice } from "./invoice.entity";
import { Injectable } from "@nestjs/common";
import { InjectRepository } from "@nestjs/typeorm";

import { TypeOrmCrudService } from "@nestjsx/crud-typeorm";
import { Job } from "src/job/job.entity";
import { SIGTERM } from "constants";
import { Account } from "src/account/account.entity";
import { TaxType } from "src/tax-type/tax-type.entity";
import { OrderType } from "src/order-type/order-type.entity";
import { InvoicePeriod } from "src/invoice-period/invoice-period.entity";
import { CustomerDetails } from "src/customer-details/customer-details.entity";
import { YardTrade } from "src/yard-trade/yard-trade.entity";

/**
 * This file was generated by Four Ways Technology
 * 
 * On Wed Sep 23 2020 14:21:52 GMT+0100 (British Summer Time)
 */
@Injectable()
export class InvoiceService extends TypeOrmCrudService<Invoice> {
  constructor(@InjectRepository(Invoice) repo) {
    super(repo);
  }

  async resetAutoIncrement(nextId: number) {
    return this.repo.manager.query('ALTER TABLE invoice AUTO_INCREMENT=' + nextId);
  }

  async nextId() {
    return await this.repo.manager.query("SELECT id from invoice order by id desc limit 1");
  }
  
  async deleteInvoice(id: number=-1) {
    return await this.repo.manager.query('DELETE FROM invoice where id = ?', [id]);
  }

  async deleteInvoiceItem(id: number=-1) {
    return await this.repo.manager.query('DELETE FROM invoice_item where id = ?', [id]);
  }

  async getInvoiceById(id: number) {
    if(!id || id === -1) {
      throw new Error('You must supply a valid id for getInvoiceById');
    }

    const results = await this.repo.find({
      where: {
        id: id,
      }
    })

    return results.length > 0 ? results[0] : null;
  }

  async getAllInvoicesByInvoiceDate(invoiceDate: string) {
    if(!invoiceDate || invoiceDate === '') {
      throw new Error('You must provide a valid invoice date in getAllInvoicesByInvoiceDate');
    }

    return this.find({where: {invoiceDate: invoiceDate}, relations: ['account', 'taxType']});
  }

  async findAvaliableInvoiceForYardTrade(yardtrade: YardTrade) {
    const query = this.repo.createQueryBuilder();


    query.where('accountId = :aid', {aid: yardtrade.customer.id});


    query.andWhere('invoiceStatusId != :id', {id: 2});

    return await query.getOne();
  }

  async findAvaliableInvoice(job: Job, split: string[]) {
    const query = this.repo.createQueryBuilder();


    query.where('accountId = :aid', {aid: job.order.accountId});

    if(split.indexOf('po') !== -1) {
      query.andWhere('poNumber = :po', {po: job.order.poNumber})
    }

    if(split.indexOf('site') !== -1) {
      query.andWhere('siteId = :siteId', {siteId: job.order.siteId});
    }

    if(split.indexOf('orderType') !== -1) {
      query.andWhere('orderTypeId = :orderTypeId', {orderTypeId: job.order.orderTypeId})
    }


    query.andWhere('invoiceStatusId != :id', {id: 2});

    return await query.getOne();
  }

  async createInvoiceObject(job: Job, customerDetails: CustomerDetails, ticketType:number=1, date:string=null, confirmation:boolean=false, invoiceNumber:number=-1) {


    if(customerDetails === undefined  || customerDetails === null) {
      customerDetails = new CustomerDetails();
    } 

    

    const invoice = new Invoice();

    if(invoiceNumber !== -1) {
      invoice.id = invoiceNumber;
    }

    invoice.site = new Account();
    invoice.taxType = new TaxType();
    invoice.account = new Account();
    invoice.orderType = new OrderType();
    invoice.invoicePeriod = new InvoicePeriod();
    invoice.createdBy = 1; //TODO: CHANGE THIS

   
    invoice.invoiceDate = date;
    invoice.confirmation = confirmation;

    // default to monthly maybe make this a env variable this is just to stop it crashes if no account invoice details.
    invoice.invoicePeriodId = customerDetails.invoicePeriodId === -1 ? 3 : customerDetails.invoicePeriodId;
    invoice.invoicePeriod = customerDetails.invoicePeriod === null ? {id: 3} as any : customerDetails.invoicePeriod;
    invoice.batchId = -1;
    invoice.posted = false;
    invoice.emailed = false;
    invoice.emailedDate = null;
    invoice.postedDate = null;
    invoice.invoiceStatusId = 1; // default open
    invoice.poNumber = job.order.poNumber;
    invoice.siteId = job.order.siteId;
    invoice.site.id = job.order.siteId;
    invoice.taxType.id = 1; // default uk basic vat
    invoice.taxTypeId = 1;
    invoice.taxType = {id: 1, name: '20% VAT', rate: 20} as any;
    invoice.orderTypeId = job.order.orderTypeId;
    invoice.orderType.id = job.order.orderTypeId;
    invoice.accountId = job.order.accountId;
    invoice.account = job.order.account;
    invoice.account.id = job.order.accountId;
    invoice.ticketType = ticketType;
  
    return invoice;
    
  }

  async createInvoiceFromJob(job: Job, customerDetails: CustomerDetails, ticketType:number=1, date:string=null, confirmation:boolean=false, invoiceNumber:number=-1, isAdditionalCharge: boolean = false) {


    if(customerDetails === undefined  || customerDetails === null) {
      customerDetails = new CustomerDetails();
    } 

    

    const invoice = new Invoice();

    if(invoiceNumber !== -1) {
      invoice.id = invoiceNumber;
    }

    invoice.site = new Account();
    invoice.taxType = new TaxType();
    invoice.account = new Account();
    invoice.orderType = new OrderType();
    invoice.invoicePeriod = new InvoicePeriod();
    invoice.createdBy = 1; //TODO: CHANGE THIS
    invoice.isAdditionalCharge = isAdditionalCharge;

   
    invoice.invoiceDate = date;
    invoice.confirmation = confirmation;

    // default to monthly maybe make this a env variable this is just to stop it crashes if no account invoice details.
    invoice.invoicePeriodId = customerDetails.invoicePeriodId === -1 ? 3 : customerDetails.invoicePeriodId;
    invoice.invoicePeriod = customerDetails.invoicePeriod === null ? {id: 3} as any : customerDetails.invoicePeriod;
    invoice.batchId = -1;
    invoice.posted = false;
    invoice.emailed = false;
    invoice.emailedDate = null;
    invoice.postedDate = null;
    invoice.invoiceStatusId = 1; // default open
    invoice.poNumber = job.order.poNumber;
    invoice.siteId = job.order.siteId;
    invoice.site.id = job.order.siteId;
    invoice.taxType.id = 1; // default uk basic vat
    invoice.taxTypeId = 1;
    invoice.orderTypeId = job.order.orderTypeId;
    invoice.orderType.id = job.order.orderTypeId;
    invoice.accountId = job.order.accountId;
    invoice.account.id = job.order.accountId;
    invoice.ticketType = ticketType;
    
    return await this.repo.save(invoice);
  }

  async createInvoiceFromYardTrade(yardTrade: YardTrade, customerDetails: CustomerDetails) {


    if(customerDetails === undefined  || customerDetails === null) {
      customerDetails = new CustomerDetails();
    } 

    

    const invoice = new Invoice();

    invoice.site = new Account();
    invoice.taxType = new TaxType();
    invoice.account = new Account();
    invoice.orderType = new OrderType();
    invoice.invoicePeriod = new InvoicePeriod();
    invoice.createdBy = 1; //TODO: CHANGE THIS

    // default to monthly maybe make this a env variable this is just to stop it crashes if no account invoice details.
    invoice.invoicePeriodId = customerDetails.invoicePeriodId === -1 ? 3 : customerDetails.invoicePeriodId;
    invoice.invoicePeriod = customerDetails.invoicePeriod === null ? {id: 3} as any : customerDetails.invoicePeriod;
    invoice.batchId = -1;
    invoice.posted = false;
    invoice.emailed = false;
    invoice.emailedDate = null;
    invoice.postedDate = null;
    invoice.invoiceStatusId = 1; // default open
    invoice.poNumber = yardTrade.poNumber;
    invoice.siteId = -1;
    invoice.site.id = -1;
    invoice.taxType.id = 1; // default uk basic vat
    invoice.taxTypeId = 1;
    invoice.orderTypeId = -1;
    invoice.orderType.id = -1;
    invoice.accountId = yardTrade.customerId
    invoice.account.id = yardTrade.customerId;
    invoice.ticketType = 1;
    
    return await this.repo.save(invoice);
  }

  async removeEmailHistoryItems(invoiceId: number=-1) {

  }
}
