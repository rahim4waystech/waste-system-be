
import { OrderProvision } from "./order-provision.entity";
import { Crud, CrudController, Action, ParsedRequest, CrudRequest } from "@nestjsx/crud";
import { Controller, Param, Post, Get, Query } from "@nestjs/common";
import { OrderProvisionService } from "./order-provision.service";
/**
 * This file was generated by Four Ways Technology
 *
 * On Thu Sep 07 2023 10:10:45 GMT+0100 (British Summer Time)
 * 
     qb.setJoin(['order.orderLines']);
    qb.setJoin(['order.orderLines.quoteLine']);
    qb.setJoin(['order.updatedUser']);
    qb.setJoin(['order.tipSite']);
 */
@Crud({
    model: {
      type: OrderProvision
    },
    query: {
      join: {
        order: {
        eager: false,
      },

      "order.account": {
        eager: false,
      },
      "order.site": {
        eager: false,
      },
      "order.orderLines": {
        eager: false,
      },
      "orderLines.quoteLine": {
        eager:false,
      },
      "order.updatedUser": {
        eager: false,
      },
      "order.tipSite": {
        eager:false,
      }
    }
  }
  })
  @Controller('order-provision')
  export class OrderProvisionController implements CrudController<OrderProvision> {
    constructor(public service: OrderProvisionService) {}


    @Get('order-provission/:date')
    @Action('artic-orders')
    async shreddingOrders(@Query('page') page: number, @Query('search') search:string='', @Query('sort') sort:string='time', @ParsedRequest() req: CrudRequest, @Param() params) {
      return this.service.getOrdersForArtic(params.date, page, 5, search, sort);
    }

    @Post('deleteSingleByOrderId/:orderId/:date')
    deleteAllByJobId(@Param() params) {

      if(!params['orderId'] || !params['date']) {
        throw new Error('You must supply an id/date for deleteSingleByOrderId');
      }

      this.service.deleteSingleProvisionByOrderId(params['orderId'], params['date']);
      return [];
    }

    
    @Post('updateSingleToAllocatedByOrderIdAndDate/:orderId/:date')
    updateSingleToAllocatedByOrderIdAndDate(@Param() params) {

      if(!params['orderId'] || !params['date']) {
        throw new Error('You must supply an id/date for updateSingleToAllocatedByOrderIdAndDate');
      }

      this.service.updateSingleToAllocatedByOrderIdAndDate(params['orderId'], params['date']);
      return [];
    }


    
  }
