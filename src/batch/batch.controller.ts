
import { Batch } from "./batch.entity";
import { Crud, CrudController, CrudRequestInterceptor, ParsedRequest, CrudRequest, Feature, Action } from "@nestjsx/crud";
import { Controller, UseInterceptors, Post, Param, Body } from "@nestjs/common";
import { BatchService } from "./batch.service";
import { InvoiceItemService } from "src/invoice-item/invoice-item.service";
import { SageService } from "src/core/sage.service";
import { InvoiceService } from "src/invoice/invoice.service";
import { User } from "src/auth/user.entity";
import { v4 as uuidv4 } from 'uuid';

import * as fs from 'fs';
/**
 * This file was generated by Four Ways Technology
 *
 * On Tue Sep 29 2020 12:19:42 GMT+0100 (British Summer Time)
 */
@Crud({
    model: {
      type: Batch
    },
    query: {
      join: {
        user: {
          eager: true
        },
      }
    }
  })
  @Controller('batch')
  @Feature('batch')
  export class BatchController implements CrudController<Batch> {
    constructor(public service: BatchService,
      private sageService: SageService,
      private invoiceService: InvoiceService,
      private invoiceItemService: InvoiceItemService) {}


    @UseInterceptors(CrudRequestInterceptor)
    @Post('export/date')
    async exportDate(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {
      if(!data.date) {
        throw new Error("You must supply date for batching by date");
      }

      const invoices = await this.invoiceService.getAllInvoicesByInvoiceDate(data.date);

      const batchData = [];

      for(let i = 0; i < invoices.length; i++) {
         const invoice = invoices[i];

         const invoiceItems: any[] = await this.invoiceItemService.getAllItemsByInvoice(invoice.id);

         batchData.push({
           invoice: invoice,
           items: invoiceItems,
           invoiceData: data.invoiceInfo
         });
      }

      const sageData = this.sageService.generateBatchExport(batchData);
      const batchId = uuidv4();

      // create batch record in db and create file on filesystem and associate.
      const batch = new Batch();
      batch.createdBy = 1; //TODO: fill this in
      batch.user = new User();
      batch.user.id = 1;
      batch.filename = 'batch-export-' + batchId + '.csv';

     await this.service.createOne(req, batch);

      fs.writeFileSync( __dirname + '/../../assets/batchfiles/' + 'batch-export-' + batchId + '.csv', sageData);

      return {filename: 'batch-export-' + batchId + '.csv'};
    }

    @UseInterceptors(CrudRequestInterceptor)
    @Post('export/batch')
    @Action('export')
    async exportBatch(@ParsedRequest() req: CrudRequest, @Param() params, @Body() data: any) {

      if(!data.data.invoiceIds) {
        throw new Error("You must supply invoice ids for batching");
      }

      const batchData = [];

      for(let i = 0; i < data.data.invoiceIds.length; i++) {

        const invoice = await this.invoiceService.findOne(data.data.invoiceIds[i], { relations: ['account', 'taxType'] });

        const invoiceItems: any[] = await this.invoiceItemService.getAllItemsByInvoice(invoice.id);

        batchData.push({
          invoice: invoice,
          items: invoiceItems,
          invoiceData: data.data.invoiceInfo
        });

      }

      return this.sageService.generateBatchExport(batchData);
    }
  }
